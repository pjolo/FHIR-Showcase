<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>FHIR Bundle Viewer</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 2em; }
    textarea { width: 100%; height: 200px; font-family: monospace; }
    table { border-collapse: collapse; width: 100%; margin-top: 1em; }
    th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
    th { background: #f0f0f0; }
    .error { color: red; }
    .resource-details { background: #fafafa; font-size: 0.95em; margin: 0.5em 0; padding: 0.5em; border-left: 3px solid #00796b; }
    .pretty-details dt { font-weight: bold; }
    .pretty-details dd { margin-bottom: 0.5em; }
    .json-tree { font-family: monospace; font-size: 0.95em; }
    .json-key { color: #00796b; }
    .json-string { color: #a31515; }
    .json-number { color: #098658; }
    .json-boolean { color: #0000ff; }
    .json-null { color: #b5b5b5; }
    ul.json-list { list-style-type: none; margin-left: 1.5em; padding-left: 0; }
    h3 { margin-top: 2em; }
  </style>
</head>
<body>
  <h2>FHIR Bundle Viewer</h2>
  <p>Füge ein FHIR Bundle (JSON) unten ein und klicke auf "Anzeigen".</p>
  <textarea id="bundleInput" placeholder="FHIR Bundle als JSON hier einfügen"></textarea>
  <br>
  <button onclick="showBundle()">Anzeigen</button>
  <div id="output"></div>

  <script>
    function showBundle() {
      const output = document.getElementById('output');
      output.innerHTML = '';
      let bundle;
      try {
        bundle = JSON.parse(document.getElementById('bundleInput').value);
      } catch (e) {
        output.innerHTML = '<div class="error">Ungültiges JSON!</div>';
        return;
      }
      if (!bundle || bundle.resourceType !== 'Bundle' || !Array.isArray(bundle.entry)) {
        output.innerHTML = '<div class="error">Kein gültiges FHIR Bundle!</div>';
        return;
      }

      // Obere Tabelle: Übersicht
      let html = `<h3>Bundle: ${bundle.type || 'Unbekannt'}</h3>`;
      html += `<table>
        <tr>
          <th>#</th>
          <th>Ressourcentyp</th>
          <th>ID</th>
          <th>Details</th>
        </tr>`;
      bundle.entry.forEach((entry, idx) => {
        const res = entry.resource || {};
        html += `<tr>
          <td>${idx + 1}</td>
          <td>${res.resourceType || '-'}</td>
          <td>${res.id || '-'}</td>
          <td>
            <div class="resource-details">
              <div class="pretty-details">${prettyDetails(res)}</div>
            </div>
          </td>
        </tr>`;
      });
      html += '</table>';

      // Untere Tabelle: Rohdaten
      html += `<h3>Rohdaten der Einträge</h3>`;
      html += `<table>
        <tr>
          <th>#</th>
          <th>Ressourcentyp</th>
          <th>ID</th>
          <th>Rohdaten (schön formatiert)</th>
        </tr>`;
      bundle.entry.forEach((entry, idx) => {
        const res = entry.resource || {};
        html += `<tr>
          <td>${idx + 1}</td>
          <td>${res.resourceType || '-'}</td>
          <td>${res.id || '-'}</td>
          <td><div class="json-tree">${renderJSONTreeOpen(res)}</div></td>
        </tr>`;
      });
      html += '</table>';

      output.innerHTML = html;
    }

    function prettyDetails(res) {
      if (!res || !res.resourceType) return '';
      switch(res.resourceType) {
        case 'Patient':
          return `
            <dl>
              <dt>Name:</dt>
              <dd>${(res.name && res.name.length) ? res.name.map(n => [n.prefix, n.given, n.family].flat().filter(Boolean).join(' ')).join(', ') : '-'}</dd>
              <dt>Geburtsdatum:</dt>
              <dd>${res.birthDate || '-'}</dd>
              <dt>Geschlecht:</dt>
              <dd>${res.gender || '-'}</dd>
              <dt>Adresse:</dt>
              <dd>${(res.address && res.address.length) ? res.address.map(a => [a.line ? a.line.join(' ') : '', a.postalCode, a.city].filter(Boolean).join(', ')).join('<br>') : '-'}</dd>
            </dl>
          `;
        case 'Observation':
          return `
            <dl>
              <dt>Code:</dt>
              <dd>${res.code && res.code.text ? res.code.text : (res.code && res.code.coding && res.code.coding[0] ? res.code.coding[0].display : '-')}</dd>
              <dt>Wert:</dt>
              <dd>${res.valueQuantity ? res.valueQuantity.value + ' ' + (res.valueQuantity.unit || '') : (res.valueString || '-')}</dd>
              <dt>Status:</dt>
              <dd>${res.status || '-'}</dd>
              <dt>Datum:</dt>
              <dd>${res.effectiveDateTime || '-'}</dd>
            </dl>
          `;
        case 'Encounter':
          return `
            <dl>
              <dt>Status:</dt>
              <dd>${res.status || '-'}</dd>
              <dt>Typ:</dt>
              <dd>${res.type && res.type[0] && res.type[0].text ? res.type[0].text : '-'}</dd>
              <dt>Beginn:</dt>
              <dd>${res.period && res.period.start ? res.period.start : '-'}</dd>
              <dt>Ende:</dt>
              <dd>${res.period && res.period.end ? res.period.end : '-'}</dd>
            </dl>
          `;
        default:
          return `
            <dl>
              <dt>ID:</dt>
              <dd>${res.id || '-'}</dd>
              <dt>Status:</dt>
              <dd>${res.status || '-'}</dd>
              <dt>Meta:</dt>
              <dd>${res.meta ? JSON.stringify(res.meta) : '-'}</dd>
            </dl>
          `;
      }
    }

    // JSON als verschachtelte, immer offene Liste anzeigen
    function renderJSONTreeOpen(obj) {
      if (obj === null) {
        return `<span class="json-null">null</span>`;
      }
      if (typeof obj === 'string') {
        return `<span class="json-string">"${obj}"</span>`;
      }
      if (typeof obj === 'number') {
        return `<span class="json-number">${obj}</span>`;
      }
      if (typeof obj === 'boolean') {
        return `<span class="json-boolean">${obj}</span>`;
      }
      if (Array.isArray(obj)) {
        if (obj.length === 0) return '[ ]';
        let html = `[<ul class="json-list">`;
        obj.forEach((item, idx) => {
          html += `<li><span class="json-key">${idx}:</span> ${renderJSONTreeOpen(item)}</li>`;
        });
        html += '</ul>]';
        return html;
      }
      const keys = Object.keys(obj);
      if (keys.length === 0) return '{ }';
      let html = `{<ul class="json-list">`;
      keys.forEach(key => {
        html += `<li><span class="json-key">${key}:</span> ${renderJSONTreeOpen(obj[key])}</li>`;
      });
      html += '</ul>}';
      return html;
    }
  </script>
</body>
</html>
